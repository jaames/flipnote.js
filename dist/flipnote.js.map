{"version":3,"sources":["webpack://flipnote/webpack/universalModuleDefinition","webpack://flipnote/webpack/bootstrap","webpack://flipnote/./encoders/wav.js","webpack://flipnote/./flipnote.js","webpack://flipnote/./loader/arrayBufferLoader.js","webpack://flipnote/./loader/fileLoader.js","webpack://flipnote/./loader/index.js","webpack://flipnote/./loader/urlLoader.js","webpack://flipnote/./parser/index.js","webpack://flipnote/./parser/kwz.js","webpack://flipnote/./parser/ppm.js","webpack://flipnote/./player/audio.js","webpack://flipnote/./player/index.js","webpack://flipnote/./utils/adpcm.js","webpack://flipnote/./utils/dataStream.js","webpack://flipnote/./webgl/canvas.js","webpack://flipnote/./webgl/shader.frag","webpack://flipnote/./webgl/shader.vert"],"names":["wavEncoder","sampleRate","channels","bitsPerSample","headerBuffer","ArrayBuffer","header","dataStream","writeUtf8","writeUint32","writeUint16","pcmData","seek","byteLength","Blob","buffer","type","module","version","VERSION","player","parser","ppmParser","kwzParser","default","matches","source","load","resolve","reject","File","reader","FileReader","onload","event","target","result","onerror","readAsArrayBuffer","loaders","urlLoader","fileLoader","arrayBufferLoader","Promise","i","length","loader","xhr","XMLHttpRequest","open","responseType","onreadystatechange","e","readyState","status","response","statusText","send","arrayBuffer","data","DataView","magic","getUint32","FRAMERATES","PALETTE","_table1","Uint16Array","_table2","_table3","values","index","a","b","c","d","_linetable","offset","f","g","h","set","_layers","_bitIndex","_bitValue","sections","size","sectionCount","sectionMagic","readUtf8","substring","sectionLength","readUint32","_decodeMeta","_decodeSoundHeader","frameMeta","frameOffsets","frameCount","frame","flags","layerSize","readUint16","frameAuthor","layerDepth","readUint8","soundFlags","cameraFlag","push","_prevDecodedFrame","num","nextBits","mask","creationTimestamp","Date","modifiedTimestamp","appVersion","rootAuthorId","readHex","parentAuthorId","currentAuthorId","rootAuthorName","readUtf16","parentAuthorName","currentAuthorName","rootFilename","parentFilename","currentFilename","thumbIndex","frameSpeed","layerFlags","thumbFrameIndex","framerate","meta","lock","loop","frame_count","frame_speed","thumb_index","timestamp","creation_timestamp","root","username","fsid","filename","parent","current","bgmSpeed","bgmrate","trackSizes","Uint32Array","soundMeta","frameIndex","diffingFlag","isPrevFrame","getDiffingFlag","decodeFrame","layerIndex","skip","tileOffsetY","tileOffsetX","subTileOffsetY","y","subTileOffsetX","x","pixelOffset","pixelBuffer","readBits","lineIndex","pixels","subarray","lineValue","lineIndexA","lineIndexB","line","pattern","useTable","Uint8Array","layers","image","pixel","map","trackIndex","id","track","output","Int16Array","outputOffset","adpcm","prevDiff","prevStepIndex","sample","diff","stepIndex","byte","bitPos","ADPCM_SAMPLE_TABLE_2","ADPCM_INDEX_TABLE_2","ADPCM_SAMPLE_TABLE_4","ADPCM_INDEX_TABLE_4","Math","max","min","slice","WIDTH","HEIGHT","BLACK","WHITE","BLUE","RED","_frameDataLength","_soundDataLength","offsetTableLength","_frameOffsets","_prevLayers","_prevFrameIndex","toString","padStart","join","unpacked","byteOffset","bitOffset","readInt16","readFilename","bgm_speed","spinoff","bgmLen","se1Len","se2Len","se3Len","paperColor","pen","isNewFrame","isTranslated","translateX","translateY","fill","readInt8","layerEncoding","readLineEncoding","layer","layerBitmap","chunkOffset","lineType","lineHeader","chunk","dest","src","arr","Array","test","audioTrack","channelCount","playbackRate","audio","document","createElement","preload","active","wav","writeFrames","url","window","URL","createObjectURL","getBlob","revokeObjectURL","currentTime","play","pause","duration","flipnotePlayer","el","width","height","querySelector","canvas","_imgCanvas","antialias","preserveDrawingBuffer","_isOpen","_events","currentFrame","paused","audioTracks","smoothRendering","note","fileLength","hasAudioTrack","decodeAudio","_audiorate","_seFlags","decodeSoundFlags","_playbackLoop","_hasPlaybackStarted","layerVisiblity","setMode","setFrame","emit","close","then","_load","catch","err","console","error","_frame","unset","clear","destroy","start","stop","_playBgm","setInterval","clearInterval","_stopAudio","firstFrame","_playFrameSe","nextFrame","encoderOptions","setSize","drawFrame","toImage","floor","_playbackFrameTime","colors","getFramePalette","layerBuffers","setPaperColor","drawLayer","resize","forceUpdate","value","filter","setFilter","mode","eventType","callback","events","callbackList","splice","indexOf","args","apply","round","volume","muted","Int8Array","ADPCM_STEP_TABLE","step","_data","_offset","whence","val","getUint8","setUint8","getInt8","setInt8","littleEndian","getUint16","setUint16","getInt16","setInt16","setUint32","getInt32","setInt32","count","reverse","bytes","hex","toUpperCase","chars","str","char","String","fromCharCode","string","charCodeAt","writeUint8","webglCanvas","params","alpha","gl","getContext","program","createProgram","refs","shaders","textures","buffers","vShader","_createShader","VERTEX_SHADER","vertexShader","fShader","FRAGMENT_SHADER","fragmentShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","log","getProgramInfoLog","deleteProgram","Error","useProgram","vertBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","activeTexture","TEXTURE0","tex","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","uniforms","uniformCount","ACTIVE_UNIFORMS","name","getActiveUniform","getUniformLocation","uniform1i","u_bitmap","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","toDataURL","LINEAR","NEAREST","u_isSmooth","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","textureType","ALPHA","LUMINANCE_ALPHA","color","uniform4f","clearColor","color1","color2","depth","texImage2D","UNSIGNED_BYTE","setColor","drawArrays","TRIANGLES","viewport","COLOR_BUFFER_BIT","forEach","texture","deleteTexture","deleteBuffer"],"mappings":"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","file":"flipnote.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"flipnote\"] = factory();\n\telse\n\t\troot[\"flipnote\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import dataStream from \"utils/dataStream\";\n\nexport default class wavEncoder {\n  constructor(sampleRate, channels=1, bitsPerSample=16) {\n    this.sampleRate = sampleRate;\n    this.channels = channels;\n    this.bitsPerSample = bitsPerSample;\n    // Write WAV file header\n    // Reference: http://www.topherlee.com/software/pcm-tut-wavformat.html\n    let headerBuffer = new ArrayBuffer(44);\n    let header = new dataStream(headerBuffer);\n    // \"RIFF\" indent\n    header.writeUtf8(\"RIFF\");\n    // filesize (set later)\n    header.writeUint32(0);\n    // \"WAVE\" indent\n    header.writeUtf8(\"WAVE\");\n    // \"fmt \" section header\n    header.writeUtf8(\"fmt \");\n    // fmt section length\n    header.writeUint32(16);\n    // specify audio format is pcm (type 1)\n    header.writeUint16(1);\n    // number of audio channels\n    header.writeUint16(this.channels);\n    // audio sample rate\n    header.writeUint32(this.sampleRate);\n    // byterate = (sampleRate * bitsPerSample * channelCount) / 8\n    header.writeUint32((this.sampleRate * this.bitsPerSample * this.channels) / 8);\n    // blockalign = (bitsPerSample * channels) / 8\n    header.writeUint16((this.bitsPerSample * this.channels) / 8);\n    // bits per sample\n    header.writeUint16(this.bitsPerSample);\n    // \"data\" section header\n    header.writeUtf8(\"data\");\n    // data section length (set later)\n    header.writeUint32(0);\n    this.header = header;\n    this.pcmData = null;\n  }\n\n  writeFrames(pcmData) {\n    let header = this.header;\n    // fill in filesize\n    header.seek(4);\n    header.writeUint32(header.byteLength + pcmData.byteLength);\n    // fill in data section length\n    header.seek(40);\n    header.writeUint32(pcmData.byteLength);\n    this.pcmData = pcmData;\n  }\n\n  getBlob() {\n    return new Blob([this.header.buffer, this.pcmData.buffer], {type: \"audio/wav\"});\n  }\n}","import player from \"./player\";\nimport parser from \"./parser\";\nimport ppmParser from \"./parser/ppm\";\nimport kwzParser from \"./parser/kwz\";\n\nconst module = {\n  version: VERSION,\n  player,\n  parser,\n  ppmParser,\n  kwzParser,\n};\n\nexport {\n  module as default,\n  parser,\n  ppmParser,\n  kwzParser\n}\n\n","export default {\n\n  matches: function(source) {\n    return (source instanceof ArrayBuffer);\n  },\n\n  load: function(source, resolve, reject) {\n    resolve(source);\n  }\n\n}","export default {\n\n  matches: function(source) {\n    return (source instanceof File);\n  },\n\n  load: function(source, resolve, reject) {\n    var reader = new FileReader();\n    reader.onload = (event) => {\n      resolve(event.target.result)\n    };\n    reader.onerror = (event) => {\n      reject({type: \"fileReadError\"});\n    };\n    reader.readAsArrayBuffer(source);\n  }\n\n}","import urlLoader from \"./urlLoader\";\nimport fileLoader from \"./fileLoader\";\nimport arrayBufferLoader from \"./arrayBufferLoader\";\n\nconst loaders = [\n  urlLoader,\n  fileLoader,\n  arrayBufferLoader\n];\n\nexport default function load(source) {\n  return new Promise(function (resolve, reject) {\n    for (var i = 0; i < loaders.length; i++) {\n      var loader = loaders[i];\n      if (loader.matches(source)) {\n        loader.load(source, resolve, reject);\n        break;\n      }\n    }\n  });\n}","export default {\n\n  matches: function(source) {\n    return typeof source === \"string\";\n  },\n\n  load: function(source, resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", source, true);\n    xhr.responseType = \"arraybuffer\"; \n    xhr.onreadystatechange = function (e) {\n      if (xhr.readyState === 4) {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve(xhr.response);\n        } else {\n          reject({\n            type: \"httpError\",\n            status: xhr.status,\n            statusText: xhr.statusText\n          });\n        }\n      }\n    };\n    xhr.send(null);\n  }\n\n}","import ppmParser from \"./ppm\";\nimport kwzParser from \"./kwz\";\n\nexport default function parser(arrayBuffer) {\n  // check the buffer's magic to identify which format it uses\n  let data = new DataView(arrayBuffer, 0, 4);\n  let magic = data.getUint32(0);\n  // check if magic is PARA (ppm magic)\n  if (magic == 0x50415241) {\n    return new ppmParser(arrayBuffer);\n  } \n  // check if magic is KFH (kwz magic)\n  else if ((magic & 0xFFFFFF00) == 0x4B464800) {\n    return new kwzParser(arrayBuffer);\n  }\n}","import dataStream from \"utils/dataStream\";\nimport {\n  ADPCM_INDEX_TABLE_2,\n  ADPCM_INDEX_TABLE_4,\n  ADPCM_SAMPLE_TABLE_2,\n  ADPCM_SAMPLE_TABLE_4\n} from \"utils/adpcm\";\n\nconst FRAMERATES = [\n  0.2,\n  0.5,\n  1,\n  2,\n  4, \n  6,\n  8,\n  12, \n  20,\n  24,\n  30\n];\n\nconst PALETTE = [\n  [0xff, 0xff, 0xff],\n  [0x10, 0x10, 0x10],\n  [0xff, 0x10, 0x10],\n  [0xff, 0xe7, 0x00],\n  [0x00, 0x86, 0x31],\n  [0x00, 0x38, 0xce],\n  [0xff, 0xff, 0xff]\n];\n\nexport default class kwzParser extends dataStream {\n\n  constructor(arrayBuffer) {\n    super(arrayBuffer);\n    this.type = \"KWZ\";\n    // table1 - commonly occuring line offsets\n    this._table1 = new Uint16Array([\n      0x0000, 0x0CD0, 0x19A0, 0x02D9, 0x088B, 0x0051, 0x00F3, 0x0009,\n      0x001B, 0x0001, 0x0003, 0x05B2, 0x1116, 0x00A2, 0x01E6, 0x0012,\n      0x0036, 0x0002, 0x0006, 0x0B64, 0x08DC, 0x0144, 0x00FC, 0x0024,\n      0x001C, 0x0004, 0x0334, 0x099C, 0x0668, 0x1338, 0x1004, 0x166C\n    ]);\n    // table2 - commonly occuring line offsets, but the lines are shifted to the left by one pixel\n    this._table2 = new Uint16Array([\n      0x0000, 0x0CD0, 0x19A0, 0x0003, 0x02D9, 0x088B, 0x0051, 0x00F3, \n      0x0009, 0x001B, 0x0001, 0x0006, 0x05B2, 0x1116, 0x00A2, 0x01E6, \n      0x0012, 0x0036, 0x0002, 0x02DC, 0x0B64, 0x08DC, 0x0144, 0x00FC, \n      0x0024, 0x001C, 0x099C, 0x0334, 0x1338, 0x0668, 0x166C, 0x1004\n    ]);\n    // table3 - line offsets, but the lines are shifted to the left by one pixel\n    this._table3 = new Uint16Array(6561);\n    var values = [0, 3, 7, 1, 4, 8, 2, 5, 6];\n    let index = 0;\n    for (let a = 0; a < 9; a++)\n      for (let b = 0; b < 9; b++)\n        for (let c = 0; c < 9; c++)\n          for (let d = 0; d < 9; d++) {\n            this._table3[index] = ((values[a] * 9 + values[b]) * 9 + values[c]) * 9 + values[d];\n            index++;\n          }\n    // linetable - contains every possible sequence of pixels for each tile line\n    this._linetable = new Uint16Array(6561 * 8);\n    var values = [0x0000, 0xFF00, 0x00FF];\n    let offset = 0;\n    for (let a = 0; a < 3; a++)\n      for (let b = 0; b < 3; b++)\n        for (let c = 0; c < 3; c++)\n          for (let d = 0; d < 3; d++)\n            for (let e = 0; e < 3; e++)\n              for (let f = 0; f < 3; f++)\n                for (let g = 0; g < 3; g++)\n                  for (let h = 0; h < 3; h++) {\n                    this._linetable.set([\n                      values[b], \n                      values[a], \n                      values[d], \n                      values[c], \n                      values[f], \n                      values[e], \n                      values[h], \n                      values[g]\n                    ], offset);\n                    offset += 8;\n                  }\n\n    // convert to uint8 array\n    // this._linetable = new Uint8Array(this._linetable.buffer);\n\n    this._layers = [\n      new Uint16Array(320 * 240),\n      new Uint16Array(320 * 240),\n      new Uint16Array(320 * 240),\n    ];\n    this._bitIndex = 0;\n    this._bitValue = 0;\n    this.load();\n  }\n\n  load() {\n    this.seek(0);\n    this.sections = {};\n    let size = this.byteLength - 256;\n    let offset = 0;\n    let sectionCount = 0;\n    // counting sections should mitigate against one of mrnbayoh's notehax exploits\n    while ((offset < size) && (sectionCount < 6)) {\n      this.seek(offset);\n      let sectionMagic = this.readUtf8(4).substring(0, 3);\n      let sectionLength = this.readUint32();\n      this.sections[sectionMagic] = {\n        offset: offset,\n        length: sectionLength\n      };\n      offset += sectionLength + 8;\n      sectionCount += 1;\n    }\n\n    this._decodeMeta();\n    this._decodeSoundHeader();\n\n    this.frameMeta = [];\n    this.frameOffsets = [];\n    this.seek(this.sections[\"KMI\"].offset + 8);\n    offset = this.sections[\"KMC\"].offset + 12;\n    for (let i = 0; i < this.frameCount; i++) {\n      let frame = {\n        flags: this.readUint32(),\n        layerSize: [\n          this.readUint16(),\n          this.readUint16(),\n          this.readUint16()\n        ],\n        frameAuthor: this.readUtf8(10),\n        layerDepth: [\n          this.readUint8(),\n          this.readUint8(),\n          this.readUint8(),\n        ],\n        soundFlags: this.readUint8(),\n        cameraFlag: this.readUint32(),\n      };\n      this.frameMeta.push(frame);\n      this.frameOffsets.push(offset);\n      offset += frame.layerSize[0] + frame.layerSize[1] + frame.layerSize[2];\n    }\n    this._prevDecodedFrame = -1;\n  }\n\n  readBits(num) {\n    if (this._bitIndex + num > 16) {\n      let nextBits = this.readUint16();\n      this._bitValue |= nextBits << (16 - this._bitIndex);\n      this._bitIndex -= 16;\n    }\n    let mask = (1 << num) - 1;\n    let result = this._bitValue & mask;\n    this._bitValue >>= num;\n    this._bitIndex += num;\n    return result;\n  }\n\n  _decodeMeta() {\n    this.seek(this.sections[\"KFH\"].offset + 12);\n    let creationTimestamp = new Date((this.readUint32() + 946684800) * 1000),\n        modifiedTimestamp = new Date((this.readUint32() + 946684800) * 1000),\n        appVersion = this.readUint32(),\n        rootAuthorId = this.readHex(10),\n        parentAuthorId = this.readHex(10),\n        currentAuthorId = this.readHex(10),\n        rootAuthorName = this.readUtf16(11),\n        parentAuthorName = this.readUtf16(11),\n        currentAuthorName = this.readUtf16(11),\n        rootFilename = this.readUtf8(28),\n        parentFilename = this.readUtf8(28),\n        currentFilename = this.readUtf8(28),\n        frameCount = this.readUint16(),\n        thumbIndex = this.readUint16(),\n        flags = this.readUint16(),\n        frameSpeed = this.readUint8(),\n        layerFlags = this.readUint8();\n    this.frameCount = frameCount;\n    this.thumbFrameIndex = thumbIndex;\n    this.frameSpeed = frameSpeed;\n    this.framerate = FRAMERATES[frameSpeed];\n    this.meta = {\n      lock: flags & 0x1,\n      loop: (flags >> 1) & 0x01,\n      frame_count: frameCount,\n      frame_speed: frameSpeed,\n      thumb_index: thumbIndex,\n      timestamp: modifiedTimestamp,\n      creation_timestamp: creationTimestamp,\n      root: {\n        username: rootAuthorName,\n        fsid: rootAuthorId,\n        filename: rootFilename,\n      },\n      parent: {\n        username: parentAuthorName,\n        fsid: parentAuthorId,\n        filename: parentFilename,\n      },\n      current: {\n        username: currentAuthorName,\n        fsid: currentAuthorId,\n        filename: currentFilename,\n      },\n    };\n  }\n\n  _decodeSoundHeader() {\n    let offset = this.sections[\"KSN\"].offset + 8;\n    this.seek(offset);\n    let bgmSpeed = this.readUint32();\n    this.bgmSpeed = bgmSpeed;\n    this.bgmrate = FRAMERATES[bgmSpeed];\n    let trackSizes = new Uint32Array(this.buffer, offset + 4, 20);\n    this.soundMeta = {\n      \"bgm\": {offset: offset += 28,            length: trackSizes[0]},\n      \"se1\": {offset: offset += trackSizes[0], length: trackSizes[1]},\n      \"se2\": {offset: offset += trackSizes[1], length: trackSizes[2]},\n      \"se3\": {offset: offset += trackSizes[2], length: trackSizes[3]},\n      \"se4\": {offset: offset += trackSizes[3], length: trackSizes[4]},\n    };\n  }\n\n  getDiffingFlag(frameIndex) {\n    return ~(this.frameMeta[frameIndex].flags >> 4) & 0x07;\n  }\n\n  getLayerDepths(frameIndex) {\n    return this.frameMeta[frameIndex].layerDepth;\n  }\n\n  decodeFrame(frameIndex, diffingFlag=0x7, isPrevFrame=false) {\n    // if this frame is being decoded as a prev frame, then we only want to decode the layers necessary\n    if (isPrevFrame)\n      diffingFlag &= this.getDiffingFlag(frameIndex + 1);\n    // the prevDecodedFrame check is an optimisation for decoding frames in full sequence\n    if ((frameIndex !== 0) && (this._prevDecodedFrame !== frameIndex - 1) && (diffingFlag))\n      this.decodeFrame(frameIndex - 1, diffingFlag=diffingFlag, isPrevFrame=true);\n\n    let meta = this.frameMeta[frameIndex];\n    let offset = this.frameOffsets[frameIndex];\n\n    for (let layerIndex = 0; layerIndex < 3; layerIndex++) {\n      this.seek(offset);\n      let layerSize = meta.layerSize[layerIndex];\n      offset += layerSize;\n\n      // if the layer is 38 bytes then it hasn't changed at all since the previous frame, so we can skip it\n      if (layerSize === 38) continue;\n\n      if ((diffingFlag >> layerIndex) & 0x1 === 0) continue;\n\n      this._bitIndex = 16;\n      this._bitValue = 0;\n      let skip = 0;\n\n      for (let tileOffsetY = 0; tileOffsetY < 240; tileOffsetY += 128) {\n        for (let tileOffsetX = 0; tileOffsetX < 320; tileOffsetX += 128) {\n          for (let subTileOffsetY = 0; subTileOffsetY < 128; subTileOffsetY += 8) {\n            let y = tileOffsetY + subTileOffsetY;\n            if (y >= 240) break;\n\n            for (let subTileOffsetX = 0; subTileOffsetX < 128; subTileOffsetX += 8) {\n              let x = tileOffsetX + subTileOffsetX;\n              if (x >= 320) break;\n\n              if (skip) {\n                skip -= 1;\n                continue;\n              }\n\n              let pixelOffset = y * 320 + x;\n              let pixelBuffer = this._layers[layerIndex];\n\n              let type = this.readBits(3);\n\n              if (type == 0) {\n                let lineIndex = this._table1[this.readBits(5)];\n                let pixels = this._linetable.subarray(lineIndex * 8, lineIndex * 8 + 8);\n                pixelBuffer.set(pixels, pixelOffset);\n                pixelBuffer.set(pixels, pixelOffset + 320);\n                pixelBuffer.set(pixels, pixelOffset + 640);\n                pixelBuffer.set(pixels, pixelOffset + 960);\n                pixelBuffer.set(pixels, pixelOffset + 1280);\n                pixelBuffer.set(pixels, pixelOffset + 1600);\n                pixelBuffer.set(pixels, pixelOffset + 1920);\n                pixelBuffer.set(pixels, pixelOffset + 2240);\n              } \n\n              else if (type == 1) {\n                let lineIndex = this.readBits(13);\n                let pixels = this._linetable.subarray(lineIndex * 8, lineIndex * 8 + 8);\n                pixelBuffer.set(pixels, pixelOffset);\n                pixelBuffer.set(pixels, pixelOffset + 320);\n                pixelBuffer.set(pixels, pixelOffset + 640);\n                pixelBuffer.set(pixels, pixelOffset + 960);\n                pixelBuffer.set(pixels, pixelOffset + 1280);\n                pixelBuffer.set(pixels, pixelOffset + 1600);\n                pixelBuffer.set(pixels, pixelOffset + 1920);\n                pixelBuffer.set(pixels, pixelOffset + 2240);\n              } \n              \n              else if (type == 2) {\n                let lineValue = this.readBits(5);\n                let lineIndexA = this._table1[lineValue];\n                let lineIndexB = this._table2[lineValue];\n                let a = this._linetable.subarray(lineIndexA * 8, lineIndexA * 8 + 8);\n                let b = this._linetable.subarray(lineIndexB * 8, lineIndexB * 8 + 8);\n                pixelBuffer.set(a, pixelOffset);\n                pixelBuffer.set(b, pixelOffset + 320);\n                pixelBuffer.set(a, pixelOffset + 640);\n                pixelBuffer.set(b, pixelOffset + 960);\n                pixelBuffer.set(a, pixelOffset + 1280);\n                pixelBuffer.set(b, pixelOffset + 1600);\n                pixelBuffer.set(a, pixelOffset + 1920);\n                pixelBuffer.set(b, pixelOffset + 2240);\n              } \n              \n              else if (type == 3) {\n                let lineIndexA = this.readBits(13);\n                let lineIndexB = this._table3[lineIndexA];\n                let a = this._linetable.subarray(lineIndexA * 8, lineIndexA * 8 + 8);\n                let b = this._linetable.subarray(lineIndexB * 8, lineIndexB * 8 + 8);\n                pixelBuffer.set(a, pixelOffset);\n                pixelBuffer.set(b, pixelOffset + 320);\n                pixelBuffer.set(a, pixelOffset + 640);\n                pixelBuffer.set(b, pixelOffset + 960);\n                pixelBuffer.set(a, pixelOffset + 1280);\n                pixelBuffer.set(b, pixelOffset + 1600);\n                pixelBuffer.set(a, pixelOffset + 1920);\n                pixelBuffer.set(b, pixelOffset + 2240);\n              }\n\n              else if (type == 4) {\n                let mask = this.readBits(8);\n                for (let line = 0; line < 8; line++) {\n                  let lineIndex = 0;\n                  if (mask & (1 << line)) {\n                    lineIndex = this._table1[this.readBits(5)];\n                  } else {\n                    lineIndex = this.readBits(13);\n                  }\n                  let pixels = this._linetable.subarray(lineIndex * 8, lineIndex * 8 + 8);\n                  pixelBuffer.set(pixels, pixelOffset + line * 320);\n                }\n              }\n\n              else if (type == 5) {\n                skip = this.readBits(5);\n                continue;\n              }\n\n              // type 6 doesnt exist\n\n              else if (type == 7) {\n                let pattern = this.readBits(2);\n                let useTable = this.readBits(1);\n                let lineIndexA = 0;\n                let lineIndexB = 0;\n\n                if (useTable) {\n                  lineIndexA = this._table1[this.readBits(5)];\n                  lineIndexB = this._table1[this.readBits(5)];\n                  pattern = (pattern + 1) % 4;\n                } else {\n                  lineIndexA = this.readBits(13);\n                  lineIndexB = this.readBits(13);\n                }\n\n                let a = this._linetable.subarray(lineIndexA * 8, lineIndexA * 8 + 8);\n                let b = this._linetable.subarray(lineIndexB * 8, lineIndexB * 8 + 8);\n\n                if (pattern == 0) {\n                  pixelBuffer.set(a, pixelOffset);\n                  pixelBuffer.set(b, pixelOffset + 320);\n                  pixelBuffer.set(a, pixelOffset + 640);\n                  pixelBuffer.set(b, pixelOffset + 960);\n                  pixelBuffer.set(a, pixelOffset + 1280);\n                  pixelBuffer.set(b, pixelOffset + 1600);\n                  pixelBuffer.set(a, pixelOffset + 1920);\n                  pixelBuffer.set(b, pixelOffset + 2240);\n                } else if (pattern == 1) {\n                  pixelBuffer.set(a, pixelOffset);\n                  pixelBuffer.set(a, pixelOffset + 320);\n                  pixelBuffer.set(b, pixelOffset + 640);\n                  pixelBuffer.set(a, pixelOffset + 960);\n                  pixelBuffer.set(a, pixelOffset + 1280);\n                  pixelBuffer.set(b, pixelOffset + 1600);\n                  pixelBuffer.set(a, pixelOffset + 1920);\n                  pixelBuffer.set(a, pixelOffset + 2240);\n                } else if (pattern == 2) {\n                  pixelBuffer.set(a, pixelOffset);\n                  pixelBuffer.set(b, pixelOffset + 320);\n                  pixelBuffer.set(a, pixelOffset + 640);\n                  pixelBuffer.set(a, pixelOffset + 960);\n                  pixelBuffer.set(b, pixelOffset + 1280);\n                  pixelBuffer.set(a, pixelOffset + 1600);\n                  pixelBuffer.set(a, pixelOffset + 1920);\n                  pixelBuffer.set(b, pixelOffset + 2240);\n                } else if (pattern == 3) {\n                  pixelBuffer.set(a, pixelOffset);\n                  pixelBuffer.set(b, pixelOffset + 320);\n                  pixelBuffer.set(b, pixelOffset + 640);\n                  pixelBuffer.set(a, pixelOffset + 960);\n                  pixelBuffer.set(b, pixelOffset + 1280);\n                  pixelBuffer.set(b, pixelOffset + 1600);\n                  pixelBuffer.set(a, pixelOffset + 1920);\n                  pixelBuffer.set(b, pixelOffset + 2240);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    this._prevDecodedFrame = frameIndex;\n    // return this._layers;\n    return [\n      new Uint8Array(this._layers[0].buffer),\n      new Uint8Array(this._layers[1].buffer),\n      new Uint8Array(this._layers[2].buffer),\n    ];\n  }\n\n  getFramePalette(frameIndex) {\n    let flags = this.frameMeta[frameIndex].flags;\n    return [\n      PALETTE[flags & 0xF], // paper color\n      PALETTE[(flags >> 8) & 0xF], // layer A color 1\n      PALETTE[(flags >> 12) & 0xF], // layer A color 2\n      PALETTE[(flags >> 16) & 0xF], // layer B color 1\n      PALETTE[(flags >> 20) & 0xF], // layer B color 2\n      PALETTE[(flags >> 24) & 0xF], // layer C color 1\n      PALETTE[(flags >> 28) & 0xF], // layer C color 2\n    ];\n  }\n\n  getFrameImage(frameIndex) {\n    let layers = this.decodeFrame(frameIndex);\n    let image = new Uint8Array((320 * 240));\n    for (let pixel = 0; pixel < (320 * 240); pixel++) {\n      let a = layers[0][pixel];\n      let b = layers[1][pixel];\n      let c = layers[2][pixel];\n      if (c) image[pixel] = c + 4;\n      if (b) image[pixel] = b + 2;\n      if (a) image[pixel] = a;\n    }\n    return image;\n  }\n\n  decodeSoundFlags() {\n    return this.frameMeta.map(frame => {\n      let soundFlags = frame.soundFlags;\n      return [\n        soundFlags & 0x1,\n        (soundFlags >> 1) & 0x1,\n        (soundFlags >> 2) & 0x1,\n        (soundFlags >> 3) & 0x1,\n      ];\n    });\n  }\n\n  hasAudioTrack(trackIndex) {\n    let id = [\"bgm\", \"se1\", \"se2\", \"se3\", \"se4\"][trackIndex];\n    return this.soundMeta[id].length > 0\n  }\n\n  decodeAudio(track) {\n    let meta = this.soundMeta[track];\n    let output = new Int16Array(16364 * 60);\n    let outputOffset = 0;\n    let adpcm = new Uint8Array(this.buffer, meta.offset, meta.length);\n    // initial decoder state\n    var prevDiff = 0;\n    var prevStepIndex = 40;\n    var sample, diff, stepIndex;\n    // loop through each byte in the raw adpcm data\n    for (let index = 0; index < adpcm.length; index++) {\n      var byte = adpcm[index];\n      var bitPos = 0;\n      while (bitPos < 8) {\n        if (prevStepIndex < 18 || bitPos == 6) {\n          // isolate 2-bit sample\n          sample = (byte >> bitPos) & 0x3;\n          // get diff\n          diff = prevDiff + ADPCM_SAMPLE_TABLE_2[sample + 4 * prevStepIndex];\n          // get step index\n          stepIndex = prevStepIndex + ADPCM_INDEX_TABLE_2[sample];\n          bitPos += 2;\n        }\n        else {\n          // isolate 4-bit sample\n          sample = (byte >> bitPos) & 0xF;\n          // get diff\n          diff = prevDiff + ADPCM_SAMPLE_TABLE_4[sample + 16 * prevStepIndex];\n          // get step index\n          stepIndex = prevStepIndex + ADPCM_INDEX_TABLE_4[sample];\n          bitPos += 4;\n        }\n        // clamp step index and diff\n        stepIndex = Math.max(0, Math.min(stepIndex, 79));\n        diff = Math.max(-2048, Math.min(diff, 2048));\n        // add result to output buffer\n        output[outputOffset] = (diff * 16);\n        outputOffset += 1;\n        // set prev decoder state\n        prevStepIndex = stepIndex;\n        prevDiff = diff;\n      }\n\n    }\n    return output.slice(0, outputOffset);\n  }\n\n}","/**\n * PPM decoder\n * Reads frames, audio, and metadata from Flipnote Studio PPM files \n * Based on my Python PPM decoder implementation (https://github.com/jaames/flipnote-tools)\n *  \n * Credits:\n *  PPM format reverse-engineering and documentation:\n *   - bricklife (http://ugomemo.g.hatena.ne.jp/bricklife/20090307/1236391313)\n *   - mirai-iro (http://mirai-iro.hatenablog.jp/entry/20090116/ugomemo_ppm)\n *   - harimau_tigris (http://ugomemo.g.hatena.ne.jp/harimau_tigris)\n *   - steven (http://www.dsibrew.org/wiki/User:Steven)\n *   - yellows8 (http://www.dsibrew.org/wiki/User:Yellows8)\n *   - PBSDS (https://github.com/pbsds)\n *   - jaames (https://github.com/jaames)\n *  Identifying the PPM sound codec:\n *   - Midmad from Hatena Haiku\n *   - WDLMaster from hcs64.com\n *  Helping me to identify issues with the Python decoder that this is based on:\n *   - Austin Burk (https://sudomemo.net)\n * \n *  Lastly, a huge thanks goes to Nintendo for creating Flipnote Studio, \n *  and to Hatena for providing the Flipnote Hatena online service, both of which inspired so many c:\n*/\n\nimport dataStream from \"utils/dataStream\";\nimport {\n  ADPCM_INDEX_TABLE_4,\n  ADPCM_SAMPLE_TABLE_4\n} from \"utils/adpcm\";\n\n// internal framerate value -> FPS table\nconst FRAMERATES = {\n  1: 0.5,\n  2: 1,\n  3: 2,\n  4: 4,\n  5: 6,\n  6: 12,\n  7: 20,\n  8: 30,\n};\n\nconst WIDTH = 256;\nconst HEIGHT = 192;\nconst BLACK = [0x0E, 0x0E, 0x0E];\nconst WHITE = [0xFF, 0xFF, 0xff];\nconst BLUE = [0x0A, 0x39, 0xFF];\nconst RED = [0xFF, 0x2A, 0x2A];\n\nexport default class ppmParser extends dataStream {\n  /**\n  * Create a ppmDecoder instance\n  * @param {ArrayBuffer} arrayBuffer - data to read from\n  */\n  constructor(arrayBuffer) {\n    super(arrayBuffer);\n    this.type = \"PPM\";\n    this.seek(4);\n    // decode header\n    // https://github.com/pbsds/hatena-server/wiki/PPM-format#file-header\n    this._frameDataLength = this.readUint32();\n    this._soundDataLength = this.readUint32();\n    this.frameCount = this.readUint16() + 1;\n    this.seek(18);\n    this.thumbFrameIndex = this.readUint16();\n    // jump to the start of the animation data section\n    // https://github.com/pbsds/hatena-server/wiki/PPM-format#animation-data-section\n    this.seek(0x06A0);\n    var offsetTableLength = this.readUint16();\n    // skip padding + flags\n    this.seek(0x06A8);\n    // read frame offsets and build them into a table\n    this._frameOffsets = new Uint32Array(offsetTableLength / 4).map(value => {\n      return 0x06A8 + offsetTableLength + this.readUint32();\n    });\n    this._decodeSoundHeader();\n    this.meta = this._decodeMeta();\n    // create image buffers\n     this._layers = [\n      new Uint8Array(WIDTH * HEIGHT),\n      new Uint8Array(WIDTH * HEIGHT)\n    ];\n    this._prevLayers = [\n      new Uint8Array(WIDTH * HEIGHT),\n      new Uint8Array(WIDTH * HEIGHT)\n    ];\n    this._prevFrameIndex = 0;\n  }\n\n  static validateFSID(fsid) {\n    return /[0159]{1}[0-9A-F]{6}0[0-9A-F]{8}/.test(fsid);\n  }\n\n  static validateFilename(filename) {\n    return /[0-9A-F]{6}_[0-9A-F]{13}_[0-9]{3}/.test(filename);\n  }\n\n  /**\n  * Read a packed filename\n  * @returns {string}\n  * @access protected\n  */\n  readFilename() {\n    return [\n      this.readHex(3),\n      this.readUtf8(13),\n      this.readUint16().toString().padStart(3, \"0\")\n    ].join(\"_\");\n  }\n\n  /**\n  * Unpack the line encoding flags for all 192 lines in a layer\n  * @returns {array}\n  * @access protected\n  */\n  readLineEncoding() {\n    var unpacked = new Uint8Array(HEIGHT);\n    for (var byteOffset = 0; byteOffset < 48; byteOffset ++) {\n      var byte = this.readUint8();\n      // each line's encoding type is stored as a 2-bit value\n      for (var bitOffset = 0; bitOffset < 8; bitOffset += 2) {\n        unpacked[byteOffset * 4 + bitOffset / 2] = (byte >> bitOffset) & 0x03;\n      }\n    }\n    return unpacked;\n  }\n\n  /**\n  * Decode the main PPM metadata, like username, timestamp, etc\n  * @returns {object}\n  * @access protected\n  */\n  _decodeMeta() {\n    // https://github.com/pbsds/hatena-server/wiki/PPM-format#file-header\n    this.seek(0x10);\n    var lock = this.readUint16(),\n        thumbIndex = this.readInt16(),\n        rootAuthorName = this.readUtf16(11),\n        parentAuthorName = this.readUtf16(11),\n        currentAuthorName = this.readUtf16(11),\n        parentAuthorId = this.readHex(8, true),\n        currentAuthorId = this.readHex(8, true),\n        parentFilename = this.readFilename(),\n        currentFilename = this.readFilename(),\n        rootAuthorId = this.readHex(8, true);\n    this.seek(0x9A);\n    var timestamp = new Date((this.readUint32() + 946684800) * 1000);\n    this.seek(0x06A6);\n    var flags = this.readUint16();\n    return {\n      lock: lock,\n      loop: flags >> 1 & 0x01,\n      frame_count: this.frameCount,\n      frame_speed: this.frameSpeed,\n      bgm_speed: this.bgmSpeed,\n      thumb_index: thumbIndex,\n      timestamp: timestamp,\n      spinoff: (currentAuthorId !== parentAuthorId) || (currentAuthorId !== rootAuthorId),\n      root: {\n        filename: null,\n        username: rootAuthorName,\n        fsid: rootAuthorId,\n      },\n      parent: {\n        username: parentAuthorName,\n        fsid: parentAuthorId,\n        filename: parentFilename\n      },\n      current: {\n        username: currentAuthorName,\n        fsid: currentAuthorId,\n        filename: currentFilename\n      },\n    };\n  }\n\n  /**\n  * Decode the sound header to get audio track lengths and frame/bgm sppeds\n  * @access protected\n  */\n  _decodeSoundHeader() {\n    // https://github.com/pbsds/hatena-server/wiki/PPM-format#sound-data-section\n    // offset = frame data offset + frame data length + sound effect flags\n    var offset = 0x06A0 + this._frameDataLength + this.frameCount;\n    // account for multiple-of-4 padding\n    if (offset % 4 != 0) offset += 4 - (offset % 4);\n    this.seek(offset);\n    var bgmLen = this.readUint32();\n    var se1Len = this.readUint32();\n    var se2Len = this.readUint32();\n    var se3Len = this.readUint32();\n    this.frameSpeed = 8 - this.readUint8();\n    this.bgmSpeed = 8 - this.readUint8();\n    offset += 32;\n    this.framerate = FRAMERATES[this.frameSpeed];\n    this.bgmrate = FRAMERATES[this.bgmSpeed];\n    this.soundMeta = {\n      \"bgm\": {offset: offset,           length: bgmLen},\n      \"se1\": {offset: offset += bgmLen, length: se1Len},\n      \"se2\": {offset: offset += se1Len, length: se2Len},\n      \"se3\": {offset: offset += se2Len, length: se3Len},\n    };\n  }\n\n  /**\n  * Check whether or not a given frame is based on the previous one\n  * @param {number} index - zero-based frame index \n  * @returns {boolean}\n  */\n  isNewFrame(index) {\n    this.seek(this._frameOffsets[index]);\n    var header = this.readUint8();\n    return (header >> 7) & 0x1;\n  }\n\n  /**\n  * Get the color palette for a given frame\n  * @param {number} index - zero-based frame index \n  * @returns {array} rgba palette in order of paper, layer1, layer2\n  */\n  getFramePalette(index) {\n    this.seek(this._frameOffsets[index]);\n    var header = this.readUint8();\n    var paperColor = header & 0x1;\n    var pen = [\n      null,\n      paperColor == 1 ? BLACK : WHITE,\n      RED,\n      BLUE,\n    ];\n    return [\n      paperColor == 1 ? WHITE : BLACK,\n      pen[(header >> 1) & 0x3], // layer 1 color\n      pen[(header >> 3) & 0x3], // layer 2 color\n    ];\n  }\n\n  /**\n  * Decode a frame\n  * @param {number} index - zero-based frame index \n  * @returns {array} - 2 uint8 arrays representing each layer\n  * */\n  decodeFrame(index) {\n    if ((index !== 0) && (this._prevFrameIndex !== index - 1) && (!this.isNewFrame(index)))\n      this.decodeFrame(index - 1);\n    // https://github.com/pbsds/hatena-server/wiki/PPM-format#animation-frame\n    this.seek(this._frameOffsets[index]);\n    var header = this.readUint8();\n    var isNewFrame = (header >> 7) & 0x1;\n    var isTranslated = (header >> 5) & 0x3;\n    var translateX = 0;\n    var translateY = 0;\n    // copy the current layer buffers to the previous ones\n    this._prevLayers[0].set(this._layers[0]);\n    this._prevLayers[1].set(this._layers[1]);\n    this._prevFrameIndex = index;\n    // reset current layer buffers\n    this._layers[0].fill(0);\n    this._layers[1].fill(0);\n\n    if (isTranslated) {\n      translateX = this.readInt8();\n      translateY = this.readInt8();\n    }\n\n    var layerEncoding = [\n      this.readLineEncoding(),\n      this.readLineEncoding()\n    ];\n     // start decoding layer bitmaps\n    for (var layer = 0; layer < 2; layer++) {\n      var layerBitmap = this._layers[layer];\n      for (var line = 0; line < HEIGHT; line++) {\n        var chunkOffset = line * WIDTH;\n        var lineType = layerEncoding[layer][line];\n        switch(lineType) {\n          // line type 0 = blank line, decode nothing\n          case 0:\n            break;\n          // line types 1 + 2 = compressed bitmap line\n          case 1:\n          case 2:\n            var lineHeader = this.readUint32(false);\n            // line type 2 starts as an inverted line\n            if (lineType == 2) layerBitmap.fill(0xFF, chunkOffset, chunkOffset + WIDTH);\n            // loop through each bit in the line header\n            while (lineHeader & 0xFFFFFFFF) {\n              // if the bit is set, this 8-pix wide chunk is stored\n              // else we can just leave it blank and move on to the next chunk\n              if (lineHeader & 0x80000000) {\n                var chunk = this.readUint8();\n                // unpack chunk bits\n                for (var pixel = 0; pixel < 8; pixel++) {\n                  layerBitmap[chunkOffset + pixel] = (chunk >> pixel & 0x1) ? 0xFF : 0x00;\n                }\n              }\n              chunkOffset += 8;\n              // shift lineheader to the left by 1 bit, now on the next loop cycle the next bit will be checked\n              lineHeader <<= 1;\n            }\n            break;\n          // line type 3 = raw bitmap line\n          case 3:\n            while(chunkOffset < (line + 1) * WIDTH) {\n              var chunk = this.readUint8();\n              for (var pixel = 0; pixel < 8; pixel++) {\n                layerBitmap[chunkOffset + pixel] = (chunk >> pixel & 0x1) ? 0xFF : 0x00\n              }\n              chunkOffset += 8;\n            }\n            break;\n        }\n      }\n    }\n    // if the current frame is based on changes from the preivous one, merge them by XORing their values\n    if (!isNewFrame) {\n      var dest, src;\n      for (var y = 0; y < HEIGHT; y++) {\n        for (var x = 0; x < WIDTH; x++) {\n          dest = x + y * WIDTH;\n          src = dest - (translateX + translateY * WIDTH);\n          if (!((x - translateX > WIDTH) || (x - translateX < 0))) {\n            this._layers[0][dest] ^= this._prevLayers[0][src];\n            this._layers[1][dest] ^= this._prevLayers[1][src];\n          }\n        }\n      }\n    }\n    return this._layers;\n  }\n\n  hasAudioTrack(trackIndex) {\n    let id = [\"bgm\", \"se1\", \"se2\", \"se3\"][trackIndex];\n    return this.soundMeta[id].length > 0;\n  }\n\n  /**\n  * Decode an audio track to 32-bit adpcm\n  * @param {string} track - track name, \"bgm\" | \"se1\" | \"se2\" | \"se3\"\n  * @returns {Int16Array}\n  */\n  decodeAudio(track) {\n    let meta = this.soundMeta[track];\n    let adpcm = new Uint8Array(this.buffer, meta.offset, meta.length);\n    let output = new Int16Array(adpcm.length * 2);\n    let outputOffset = 0;\n    // initial decoder state\n    var prevDiff = 0;\n    var prevStepIndex = 0;\n    var sample, diff, stepIndex;\n    // loop through each byte in the raw adpcm data\n    for (let index = 0; index < adpcm.length; index++) {\n      let byte = adpcm[index];\n      var bitPos = 0;\n      while (bitPos < 8) {\n        // isolate 4-bit sample\n        sample = (byte >> bitPos) & 0xF;\n        // get diff\n        diff = prevDiff + ADPCM_SAMPLE_TABLE_4[sample + 16 * prevStepIndex];\n        // get step index\n        stepIndex = prevStepIndex + ADPCM_INDEX_TABLE_4[sample];\n        // clamp step index and diff\n        stepIndex = Math.max(0, Math.min(stepIndex, 79));\n        diff = Math.max(-32767, Math.min(diff, 32767));\n        // add result to output buffer\n        output[outputOffset] = (diff);\n        outputOffset += 1;\n        // set prev decoder state\n        prevStepIndex = stepIndex;\n        prevDiff = diff;\n        // move to next sample\n        bitPos += 4;\n      }\n    }\n    return output;\n  }\n\n  /**\n  * Decode the sound effect usage for each frame\n  * @returns {array}\n  */\n  decodeSoundFlags() {\n    this.seek(0x06A0 + this._frameDataLength);\n    // per msdn docs - the array map callback is only invoked for array indicies that have assigned values\n    // so when we create an array, we need to fill it with something before we can map over it\n    var arr = new Array(this.frameCount).fill([]);\n    return arr.map(value => {\n      var byte = this.readUint8();\n      return [byte & 0x1, (byte >> 1) & 0x1, (byte >> 2) & 0x1];\n    });\n  }\n}","import wavEncoder from \"encoders/wav\";\n\nexport default class audioTrack {\n  /**\n  * Create a new audio player\n  */\n  constructor (id, type) {\n    this.id = id;\n    this.channelCount = 1;\n    this.bitsPerSample = 16;\n    this.sampleRate = type === \"KWZ\" ? 16364 : 8192;\n    this.playbackRate = 1;\n    this.audio = document.createElement(\"audio\");\n    this.audio.preload = true;\n    this.active = false;\n  }\n\n  /**\n  * Set the audio track\n  * @param {Int16Array} pcmData - mono-channel 16-bit PCM audio\n  * @param {number} playbackRate - audio playback rate (1 = default)\n  */\n  set(pcmData, playbackRate) {\n    // the HTML5 audio element supports PCM audio if it's in a WAV wrapper\n    let wav = new wavEncoder(this.sampleRate * playbackRate, this.channelCount, this.bitsPerSample);\n    wav.writeFrames(pcmData);\n    this.url = window.URL.createObjectURL(wav.getBlob());\n    // use the blob url for the audio element\n    this.audio.src = this.url;\n    this.active = true;\n    this.playbackRate = playbackRate;\n    this.length = pcmData.length;\n  }\n\n  get duration() {\n    return this.audio.duration;\n  }\n\n  /**\n  * Clear the audio track\n  */\n  unset() {\n    if (this.active) {\n      window.URL.revokeObjectURL(this.url);\n      this.audio.src = \"\";\n      this.audio.load();\n      this.active = false;\n      this.playbackRate = 1;\n      this.length = null;\n    }\n  }\n\n  /**\n  * Start audio playback\n  * @param {number} offset - offset to begin playback at\n  */\n  start(offset) {\n    if (this.active) {\n      this.audio.currentTime = offset || 0;\n      this.audio.play();\n    }\n  }\n\n  /**\n  * Stop audio playback\n  */\n  stop() {\n    if (this.active) {\n      this.audio.pause();\n    }\n  }\n}","import canvas from \"webgl/canvas\";\nimport parser from \"parser\";\nimport loader from \"loader\";\nimport audioTrack from \"./audio\";\nimport webglCanvas from \"../webgl/canvas\";\n\n/** flipnote player API, based on HTMLMediaElement (https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement) */ \nexport default class flipnotePlayer {\n  /**\n  * Create new flipnote player\n  * @param {string | HTMLCanvasElement} el - HTML Canvas Element to use, or CSS selector for one\n  * @param {number} width - canvas width in pixels\n  * @param {number} height - canvas height in pixels\n  */\n  constructor(el, width, height) {\n    // if `el` is a string, use it to select an Element, else assume it's an element\n    el = (\"string\" == typeof el) ? document.querySelector(el) : el;\n    this.canvas = new canvas(el, width, height);\n    this._imgCanvas = new canvas(document.createElement(\"canvas\"), width, height, {\n      antialias: true,\n      preserveDrawingBuffer: true,\n    });\n    this._isOpen = false;\n    this._events = {};\n    this.loop = false;\n    this.currentFrame = 0;\n    this.paused = true;\n    this.audioTracks = [\n      new audioTrack(\"se1\"),\n      new audioTrack(\"se2\"),\n      new audioTrack(\"se3\"),\n      new audioTrack(\"se4\"),\n      new audioTrack(\"bgm\"),\n    ];\n    this.smoothRendering = false;\n  }\n\n  /**\n  * Get the index of the current frame \n  */\n  get currentFrame() {\n    return this._frame;\n  }\n\n  /**\n  * Set the current frame\n  */\n  set currentFrame(index) {\n    this.setFrame(index);\n  }\n\n  /**\n  * Get current playback time in seconds\n  */\n  get currentTime() {\n    return this._isOpen ? this.currentFrame * (1 / this.framerate) : null;\n  }\n\n  /**\n  * Set current playback time in seconds\n  */\n  set currentTime(value) {\n    if ((this._isOpen) && (value < this.duration) && (value > 0)) {\n      this.setFrame(Math.round(value / (1 / this.framerate)));\n    }\n  }\n\n  /**\n  * Get audio volume\n  */\n  get volume() {\n    return this.audioTracks[3].audio.volume;\n  }\n\n  /**\n  * Set audio volume\n  */\n  set volume(value) {\n    for (let i = 0; i < this.audioTracks.length; i++) {\n      this.audioTracks[i].audio.volume = value;\n    }\n  }\n\n  /**\n  * Get audio mute\n  */\n  get muted() {\n    return this.audioTracks[3].audio.muted;\n  }\n\n  /**\n  * Set audio mute\n  */\n  set muted(value) {\n    for (let i = 0; i < this.audioTracks.length; i++) {\n      this.audioTracks[i].audio.muted = value;\n    }\n  }\n\n  /**\n  * Get the duration of the Flipnote in seconds\n  */\n  get duration() {\n    return this._isOpen ? this.frameCount * (1 / this.framerate) : null;\n  }\n\n  /**\n  * Get the Flipnote framerate in frames-per-second\n  */\n  get framerate() {\n    return this.note.framerate;\n  }\n\n  /**\n  * Get the audio playback rate by comparing audio and frame speeds\n  * @access protected\n  */\n  get _audiorate() {\n    return (1 / this.note.bgmrate) / (1 / this.note.framerate);\n  }\n\n  /**\n  * Load a Flipnote into the player\n  * @param {ArrayBuffer} buffer - ppm data\n  * @access protected\n  */\n  _load(buffer) {\n    var note = new parser(buffer);\n    this.note = note;\n    this.meta = note.meta;\n    this.type = note.type;\n    this.frameCount = note.frameCount;\n    this.frameSpeed = note.frameSpeed;\n    this.fileLength = note.byteLength;\n    this.loop = note.meta.loop == 1;\n    this.paused = true;\n    this._isOpen = true;\n    if (this.note.hasAudioTrack(1)) this.audioTracks[0].set(this.note.decodeAudio(\"se1\"), 1);\n    if (this.note.hasAudioTrack(2)) this.audioTracks[1].set(this.note.decodeAudio(\"se2\"), 1);\n    if (this.note.hasAudioTrack(3)) this.audioTracks[2].set(this.note.decodeAudio(\"se3\"), 1);\n    if (this.type === \"KWZ\" && this.note.hasAudioTrack(4)) this.audioTracks[3].set(this.note.decodeAudio(\"se4\"), 1);\n    if (this.note.hasAudioTrack(0)) this.audioTracks[4].set(this.note.decodeAudio(\"bgm\"), this._audiorate);\n    this._seFlags = this.note.decodeSoundFlags();\n    this._playbackLoop = null;\n    this._hasPlaybackStarted = false;\n    this.layerVisiblity = {\n      1: true,\n      2: true,\n      3: true\n    };\n    this.setMode(this.type);\n    this.setFrame(this.note.thumbFrameIndex);\n    this.emit(\"load\");\n  }\n\n  /**\n  * Load a Flipnote into the player\n  * @param {String} source - ppm url\n  */\n  open(source) {\n    if (this._isOpen) this.close();\n    return loader(source)\n      .then((buffer) => {\n        this._load(buffer);\n      })\n      .catch((err) => {\n        console.error(\"Error loading Flipnote:\", err);\n      });\n  }\n\n  /**\n  * Close the currently loaded Flipnote and clear the player canvas\n  */\n  close() {\n    this.pause();\n    this.note = null;\n    this._isOpen = false;\n    this.paused = true;\n    this.loop = null;\n    this.meta = null;\n    this.frameCount = null;\n    this.frameSpeed = null;\n    this._frame = 0;\n    for (let i = 0; i < this.audioTracks.length; i++) {\n      this.audioTracks[i].unset();\n    }\n    this._seFlags = null;\n    this._hasPlaybackStarted = null;\n    this.canvas.clear();\n    this._imgCanvas.clear();\n  }\n\n  /**\n  * Destroy this player instance cleanly\n  */\n  destroy() {\n    this.close();\n    this.canvas.destroy();\n    this._imgCanvas.destroy();\n  }\n\n  /**\n  * Play the sound effects for a given frame\n  * @param {number} index - zero-based frame index\n  * @access protected\n  */\n  _playFrameSe(index) {\n    var flags = this._seFlags[index];\n    for (let i = 0; i < flags.length; i++) {\n      if (flags[i] && this.audioTracks[i].active) this.audioTracks[i].start();\n    }\n  }\n\n  /**\n  * Play the Flipnote BGM\n  * @access protected\n  */\n  _playBgm() {\n    this.audioTracks[4].start(this.currentTime);\n  }\n\n  /**\n  * Stop all audio tracks\n  * @access protected\n  */\n  _stopAudio() {\n    for (let i = 0; i < this.audioTracks.length; i++) {\n      this.audioTracks[i].stop();\n    }\n  }\n\n  /**\n  * Begin Flipnote playback\n  */\n  play() {\n    if ((!this._isOpen) || (!this.paused)) return null;\n    this.paused = false;\n    if ((!this._hasPlaybackStarted) || ((!this.loop) && (this.currentFrame == this.frameCount - 1))) this._frame = 0;\n    this._playBgm();\n    this._playbackLoop = setInterval(() => {\n      if (this.paused) clearInterval(this._playbackLoop);\n      // if the end of the flipnote has been reached\n      if (this.currentFrame >= this.frameCount -1) {\n        this._stopAudio();\n        if (this.loop) {\n          this.firstFrame();\n          this._playBgm(0);\n          this.emit(\"playback:loop\");\n        } else {\n          this.pause();\n          this.emit(\"playback:end\");\n        }\n      } else {\n        this._playFrameSe(this.currentFrame);\n        this.nextFrame();\n      }\n    }, 1000 / this.framerate);\n    this._hasPlaybackStarted = true;\n    this.emit(\"playback:start\");\n  }\n\n  /**\n  * Pause Flipnote playback\n  */\n  pause() {\n    if ((!this._isOpen) || (this.paused)) return null;\n    // break the playback loop\n    clearInterval(this._playbackLoop);\n    this.paused = true;\n    this._stopAudio();\n    this.emit(\"playback:stop\");\n  }\n\n  /**\n  * Get a specific frame as an image data URL\n  * @param {number|string} index - zero-based frame index, or pass \"thumb\" to get the thumbnail frame\n  * @param {string} type - image MIME type, default is image/png\n  * @param {number} encoderOptions - number between 0 and 1 indicating image quality if type is image/jpeg or image/webp\n  */\n  getFrameImage(index, width, height, type, encoderOptions) {\n    if (!this._isOpen) return null;\n    var canvas = this._imgCanvas;\n    if (canvas.width !== width || canvas.height !== height) canvas.setSize(width, height);\n    // clamp frame index\n    index = (index == \"thumb\") ? (this.note.thumbFrameIndex) : (Math.max(0, Math.min(index, this.frameCount - 1)));\n    this.drawFrame(index, canvas);\n    return canvas.toImage(type, encoderOptions);\n  }\n\n  /**\n  * Jump to a specific frame\n  * @param {number} index - zero-based frame index\n  */\n  setFrame(index) {\n    if ((!this._isOpen) || (index === this.currentFrame)) return null;\n    // clamp frame index\n    index = Math.max(0, Math.min(Math.floor(index), this.frameCount - 1));\n    this._frame = index;\n    this._playbackFrameTime = 0;\n    this.drawFrame(index, this.canvas);\n    this.emit(\"frame:update\", this.currentFrame);\n  }\n\n  /**\n  * Draw a frame to a given canvas\n  * @param {number} index - zero-based frame index\n  * @param {webglCanvas} canvas - webgl frame canvas\n  */\n  drawFrame(frameIndex, canvas) {\n    let colors = this.note.getFramePalette(frameIndex);\n    let layerBuffers = this.note.decodeFrame(frameIndex);\n    canvas.setPaperColor(colors[0]);\n    canvas.clear();\n    if (this.note.type == \"PPM\") {\n      if (this.layerVisiblity[2]) canvas.drawLayer(layerBuffers[1], 256, 192, colors[2], [0,0,0,0]);\n      if (this.layerVisiblity[1]) canvas.drawLayer(layerBuffers[0], 256, 192, colors[1], [0,0,0,0]);\n    } else if (this.note.type == \"KWZ\") {\n      if (this.layerVisiblity[3]) canvas.drawLayer(layerBuffers[2], 320, 240, colors[5], colors[6]);\n      if (this.layerVisiblity[2]) canvas.drawLayer(layerBuffers[1], 320, 240, colors[3], colors[4]);\n      if (this.layerVisiblity[1]) canvas.drawLayer(layerBuffers[0], 320, 240, colors[1], colors[2]);\n    }\n  }\n\n  /**\n  * Jump to the thumbnail frame\n  */\n  thumbnailFrame() {\n    this.currentFrame = this.note.thumbFrameIndex;\n  }\n\n  /**\n  * Jump to the next frame in the animation\n  */\n  nextFrame() {\n    if ((this.loop) && (this.currentFrame >= this.frameCount -1)) {\n      this.currentFrame = 0;\n    } else {\n      this.currentFrame += 1;\n    }\n  }\n\n  /**\n  * Jump to the previous frame in the animation\n  */\n  prevFrame() {\n    if ((this.loop) && (this.currentFrame <= 0)) {\n      this.currentFrame = this.frameCount - 1;\n    } else {\n      this.currentFrame -= 1;\n    }\n  }\n\n  /**\n  * Jump to the last frame in the animation\n  */\n  lastFrame() {\n    this.currentFrame = this.frameCount - 1;\n  }\n\n  /**\n  * Jump to the first frame in the animation\n  */\n  firstFrame() {\n    this.currentFrame = 0;\n  }\n\n  /**\n  * Resize player canvas\n  * @param {number} width - canvas width in pixels\n  * @param {number} height - canvas height in pixels\n  */\n  resize(width, height) {\n    this.canvas.resize(width, height);\n    this.forceUpdate();\n  }\n\n  /**\n  * Set layer visibility\n  * @param {number} index - layer number = 1, 2, 3\n  * @param {boolean} value\n  */\n  setLayerVisibility(index, value) {\n    this.layerVisiblity[index] = value;\n    this.forceUpdate();\n  }\n\n  /**\n  * Set smooth rendering\n  * @param {boolean} value\n  */\n  setSmoothRendering(value) {\n    var filter = value ? \"linear\" : \"nearest\";\n    this.canvas.setFilter(filter);\n    this.forceUpdate();\n    this.smoothRendering = value;\n  }\n\n  /**\n  * Set the mode depending on format\n  * @param {string} mode - \"KWZ\" | \"PPM\"\n  */\n  setMode(mode) {\n    this.canvas.setMode(mode);\n    this._imgCanvas.setMode(mode);\n  }\n\n  /**\n  * Force the player to redraw\n  */\n  forceUpdate() {\n    if (this._isOpen) {\n      this.drawFrame(this.currentFrame, this.canvas);\n    }\n  }\n\n  /**\n  * Register an event callback\n  * @param {string} eventType - event type\n  * @param {function} callback - event callback function\n  */\n  on(eventType, callback) {\n    var events = this._events;\n    (events[eventType] || (events[eventType] = [])).push(callback);\n  }\n\n  /**\n  * Remove an event callback\n  * @param {string} eventType - event type\n  * @param {function} callback - event callback function\n  */\n  off(eventType, callback) {\n    var callbackList = this._events[eventType];\n    if (callbackList) callbackList.splice(callbackList.indexOf(callback), 1);\n  }\n\n  /**\n  * Emit an event (used internally)\n  * @param {string} eventType - event type\n  * @param {...} args - arguments to be passed to event callback\n  */\n  emit(eventType, ...args) {\n    var callbackList = this._events[eventType] || [];\n    for (var i = 0; i < callbackList.length; i++) {\n      callbackList[i].apply(null, args); \n    }\n  }\n\n}","export const ADPCM_INDEX_TABLE_2 = new Int8Array([\n  -1, 2, -1, 2\n]);\n\nexport const ADPCM_INDEX_TABLE_4 = new Int8Array([\n  -1, -1, -1, -1, 2, 4, 6, 8,\n  -1, -1, -1, -1, 2, 4, 6, 8\n]);\n\n// note that this is a slight deviation from the normal adpcm table\nexport const ADPCM_STEP_TABLE = new Int16Array([\n  7, 8, 9, 10, 11, 12, 13, 14, 16, 17,\n  19, 21, 23, 25, 28, 31, 34, 37, 41, 45,\n  50, 55, 60, 66, 73, 80, 88, 97, 107, 118,\n  130, 143, 157, 173, 190, 209, 230, 253, 279, 307,\n  337, 371, 408, 449, 494, 544, 598, 658, 724, 796,\n  876, 963, 1060, 1166, 1282, 1411, 1552, 1707, 1878, 2066,\n  2272, 2499, 2749, 3024, 3327, 3660, 4026, 4428, 4871, 5358,\n  5894, 6484, 7132, 7845, 8630, 9493, 10442, 11487, 12635, 13899,\n  15289, 16818, 18500, 20350, 22385, 24623, 27086, 29794, 32767, 0\n]);\n\nexport const ADPCM_SAMPLE_TABLE_2 = new Int16Array(90 * 4);\nfor (let sample = 0; sample < 4; sample++) {\n  for (let stepIndex = 0; stepIndex < 90; stepIndex++) {\n    let step = ADPCM_STEP_TABLE[stepIndex];\n    let diff = step >> 3;\n    if (sample & 1) diff += step;\n    if (sample & 2) diff = -diff;\n    ADPCM_SAMPLE_TABLE_2[sample + 4 * stepIndex] = diff;\n  }\n}\n\nexport const ADPCM_SAMPLE_TABLE_4 = new Int16Array(90 * 16);\nfor (let sample = 0; sample < 16; sample++) {\n  for (let stepIndex = 0; stepIndex < 90; stepIndex++) {\n    let step = ADPCM_STEP_TABLE[stepIndex];\n    let diff = step >> 3;\n    if (sample & 4) diff += step;\n    if (sample & 2) diff += step >> 1;\n    if (sample & 1) diff += step >> 2;\n    if (sample & 8) diff = -diff;\n    ADPCM_SAMPLE_TABLE_4[sample + 16 * stepIndex] = diff;\n  }\n}","/** datastream serves as a wrapper around the DataView API to help keep track of the offset into the stream */\nexport default class dataStream {\n  /**\n  * Create a fileReader instance\n  * @param {ArrayBuffer} arrayBuffer - data to read from\n  */\n  constructor(arrayBuffer) {\n    this.buffer = arrayBuffer;\n    this._data = new DataView(arrayBuffer);\n    this._offset = 0;\n  }\n\n  /**\n  * Get the length of the stream\n  * @returns {number}\n  */\n  get byteLength() {\n    return this._data.byteLength;\n  }\n\n  /**\n  * based on the seek method from Python's file objects - https://www.tutorialspoint.com/python/file_seek.htm\n  * @param {number} offset - position of the read pointer within the stream\n  * @param {number} whence - (optional) defaults to absolute file positioning,\n  *                          1 = offset is relative to the current position\n  *                          2 = offset is relative to the stream's end\n  */\n  seek(offset, whence) {\n    switch (whence) {\n      case 2:\n        this._offset = this._data.byteLength + offset;\n        break;\n      case 1:\n        this._offset += offset;\n        break;\n      case 0:\n      default:\n        this._offset = offset;\n        break;\n    }\n  }\n\n  /**\n  * Read an unsigned 8-bit integer from the stream, and automatically increment the offset\n  * @returns {number}\n  */\n  readUint8() {\n    var val = this._data.getUint8(this._offset);\n    this._offset += 1;\n    return val;\n  }\n\n  /**\n  * Write an unsigned 8-bit integer to the stream, and automatically increment the offset\n  * @param {number} value - value to write\n  */\n  writeUint8(value) {\n    this._data.setUint8(this._offset, value);\n    this._offset += 1;\n  }\n\n  /**\n  * Read a signed 8-bit integer from the stream, and automatically increment the offset\n  * @returns {number}\n  */\n  readInt8() {\n    var val = this._data.getInt8(this._offset);\n    this._offset += 1;\n    return val;\n  }\n\n  /**\n  * Write a signed 8-bit integer to the stream, and automatically increment the offset\n  * @param {number} value - value to write\n  */\n  writeInt8(value) {\n    this._data.setInt8(this._offset, value);\n    this._offset += 1;\n  }\n\n  /**\n  * Read an unsigned 16-bit integer from the stream, and automatically increment the offset\n  * @param {boolean} littleEndian - defaults to true, set to false to read data in big endian byte order\n  * @returns {number}\n  */\n  readUint16(littleEndian=true) {\n    var val = this._data.getUint16(this._offset, littleEndian);\n    this._offset += 2;\n    return val;\n  }\n\n  /**\n  * Write an unsigned 16-bit integer to the stream, and automatically increment the offset\n  * @param {number} value - value to write\n  * @param {boolean} littleEndian - defaults to true, set to false to write data in big endian byte order\n  */\n  writeUint16(value, littleEndian=true) {\n    this._data.setUint16(this._offset, value, littleEndian);\n    this._offset += 2;\n  }\n\n  /**\n  * Read a signed 16-bit integer from the stream, and automatically increment the offset\n  * @param {boolean} littleEndian - defaults to true, set to false to read data in big endian byte order\n  * @returns {number}\n  */\n  readInt16(littleEndian=true) {\n    var val = this._data.getInt16(this._offset, littleEndian);\n    this._offset += 2;\n    return val;\n  }\n\n  /**\n  * Write a signed 16-bit integer to the stream, and automatically increment the offset\n  * @param {number} value - value to write\n  * @param {boolean} littleEndian - defaults to true, set to false to write data in big endian byte order\n  */\n  writeInt16(value, littleEndian=true) {\n    this._data.setInt16(this._offset, value, littleEndian);\n    this._offset += 2;\n  }\n\n  /**\n  * Read an unsigned 32-bit integer from the stream, and automatically increment the offset\n  * @param {boolean} littleEndian - defaults to true, set to false to read data in big endian byte order\n  * @returns {number}\n  */\n  readUint32(littleEndian=true) {\n    var val = this._data.getUint32(this._offset, littleEndian);\n    this._offset += 4;\n    return val;\n  }\n\n  /**\n  * Write an unsigned 32-bit integer to the stream, and automatically increment the offset\n  * @param {number} value - value to write\n  * @param {boolean} littleEndian - defaults to true, set to false to write data in big endian byte order\n  */\n  writeUint32(value, littleEndian=true) {\n    this._data.setUint32(this._offset, value, littleEndian);\n    this._offset += 4;\n  }\n\n  /**\n  * Read a signed 32-bit integer from the stream, and automatically increment the offset\n  * @param {boolean} littleEndian - defaults to true, set to false to read data in big endian byte order\n  * @returns {number}\n  */\n  readInt32(littleEndian=true) {\n    var val = this._data.getInt32(this._offset, littleEndian);\n    this._offset += 4;\n    return val;\n  }\n\n  /**\n  * Write a signed 32-bit integer to the stream, and automatically increment the offset\n  * @param {number} value - value to write\n  * @param {boolean} littleEndian - defaults to true, set to false to write data in big endian byte order\n  */\n  writeInt32(value, littleEndian=true) {\n    this._data.setInt32(this._offset, value, littleEndian);\n    this._offset += 4;\n  }\n\n\n  /**\n  * Read bytes and return a hex string\n  * @param {number} count - number of bytes to read\n  * @param {bool} reverse - pass true to reverse byte order\n  * @returns {string}\n  */\n  readHex(count, reverse=false) {\n    var bytes = new Uint8Array(this._data.buffer, this._offset, count);\n    this._offset += bytes.byteLength;\n    let hex = [];\n    for (let i = 0; i < bytes.length; i++) {\n      hex.push(bytes[i].toString(16).padStart(2, \"0\"));\n    }\n    if (reverse) hex.reverse();\n    return hex.join(\"\").toUpperCase();\n  }\n\n  /**\n  * Read (simple) utf8 string\n  * @param {number} count - number of characters to read\n  * @returns {string}\n  */\n  readUtf8(count) {\n    var chars = new Uint8Array(this._data.buffer, this._offset, count);\n    this._offset += chars.byteLength;\n    var str = \"\";\n    for (let i = 0; i < chars.length; i++) {\n      let char = chars[i];\n      if (char == 0) break;\n      str += String.fromCharCode(char);\n    }\n    return str;\n  }\n\n  /**\n  * Write (simple) utf8 string\n  * @param {string} string - string to write\n  */\n  writeUtf8(string) {\n    for (let i = 0; i < string.length; i++) {\n      let char = string.charCodeAt(i);\n      this.writeUint8(char);\n    }\n  }\n\n  /**\n  * Read (simple) utf16 string\n  * @param {number} count - number of characters to read\n  * @returns {string}\n  */\n  readUtf16(count) {\n    var chars = new Uint16Array(this._data.buffer, this._offset, count);\n    this._offset += chars.byteLength;\n    var str = \"\";\n    for (let i = 0; i < chars.length; i++) {\n      let char = chars[i];\n      if (char == 0) break;\n      str += String.fromCharCode(char);\n    }\n    return str;\n  }\n}","import vertexShader from \"./shader.vert\";\nimport fragmentShader from \"./shader.frag\";\n\n/** webgl canvas wrapper class */\nexport default class webglCanvas {\n  /**\n  * Create a rendering canvas\n  * @param {HTMLCanvasElement} el - The HTML canvas element\n  * @param {number} width - width of the canvas in pixels\n  * @param {number} height - height of the canvas in pixels\n  * @param {Object} params - optional params to pass to web gl context\n  */\n  constructor(el, width=640, height=480, params={antialias: false, alpha: false}) {\n    this.width = el.width = width;\n    this.height = el.height = height; \n    var gl = el.getContext(\"webgl\", params);\n    var program = gl.createProgram();\n    this.program = program;\n    this.el = el;\n    this.gl = gl;\n    this.refs = {\n      shaders:[],\n      textures:[],\n      buffers: []\n    };\n    // set up shaders\n    var vShader = this._createShader(gl.VERTEX_SHADER, vertexShader);\n    var fShader = this._createShader(gl.FRAGMENT_SHADER, fragmentShader);\n    gl.attachShader(program, vShader);\n    gl.attachShader(program, fShader);\n    // link program\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      let log = gl.getProgramInfoLog(program);\n      gl.deleteProgram(program);\n      throw new Error(log);\n    }\n    // activate the program\n    gl.useProgram(program);\n    // create quad that fills the screen, this will be our drawing surface\n    var vertBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1,  1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1]), gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(0);\n    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n    this.refs.buffers.push(vertBuffer);\n    // create texture to use as the layer bitmap\n    gl.activeTexture(gl.TEXTURE0);\n    var tex = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, tex);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    // get uniform locations\n    this.uniforms = {};\n    let uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < uniformCount; i++) {\n      let name = gl.getActiveUniform(program, i).name;\n      this.uniforms[name] = gl.getUniformLocation(program, name);\n    }\n    gl.uniform1i(this.uniforms.u_bitmap, 0);\n    this.setFilter(\"linear\");\n    this.setMode(\"PPM\");\n    this.refs.textures.push(tex);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n  }\n  \n  /**\n  * Util to compile and attach a new shader\n  * @param {shader type} type - gl.VERTEX_SHADER | gl.FRAGMENT_SHADER\n  * @param {string} source - GLSL code for the shader\n  * @returns {shader} compiled webgl shader\n  * @access protected \n  */\n  _createShader(type, source) {\n    var gl = this.gl;\n    var shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    // test if shader compilation was successful\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      let log = gl.getShaderInfoLog(shader);\n      gl.deleteShader(shader);\n      throw new Error(log);\n    }\n    this.refs.shaders.push(shader);\n    return shader;\n  }\n\n  /**\n  * get the canvas content as an image\n  * @param {string} type - image MIME type, default is image/png\n  * @param {number} encoderOptions - number between 0 and 1 indicating image quality if type is image/jpeg or image/webp\n  * @returns {DataUrl}\n  */\n  toImage(type, encoderOptions) {\n    return this.el.toDataURL(type, encoderOptions);\n  }\n\n  /**\n  * Set the texture filter\n  * @param {string} filter - \"linear\" | \"nearest\"\n  */\n  setFilter(filter) {\n    var gl = this.gl;\n    filter = filter == \"linear\" ? gl.LINEAR : gl.NEAREST;\n    gl.uniform1i(this.uniforms.u_isSmooth, filter == \"linear\" ? 0 : 1);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\n  }\n\n  /**\n  * Set the canvas mode depending on format\n  * @param {string} mode - \"KWZ\" | \"PPM\"\n  */\n  setMode(mode) {\n    const { gl } = this;\n    if (mode === \"PPM\") {\n      this.textureType = gl.ALPHA;\n    } else if (mode === \"KWZ\") {\n      this.textureType = gl.LUMINANCE_ALPHA;\n    }\n  }\n\n  /**\n  * Set a color\n  * @param {string} color - name of the color's uniform variable\n  * @param {array} value - r,g,b color, each channel's value should be between 0 and 255\n  */\n  setColor(color, value) {\n    this.gl.uniform4f(this.uniforms[color], value[0]/255, value[1]/255, value[2]/255, 1);\n  }\n\n  /**\n  * Set an palette individual color\n  * @param {array} value - r,g,b color, each channel's value should be between 0 and 255\n  */\n  setPaperColor(value) {\n    this.gl.clearColor(value[0] / 255, value[1] / 255, value[2] / 255, 1);\n  }\n\n  /**\n  * Draw a single frame layer\n  * @param {Uint16Array} buffer - layer pixels\n  * @param {number} width - layer width\n  * @param {number} height - layer height\n  * @param {array} color1 - r,g,b for layer color 1, each channel's value should be between 0 and 255\n  * @param {array} color2 - r,g,b for layer color 2, each channel's value should be between 0 and 255\n  * @param {number} depth - layer depth (kwz only, but currently unused)\n  */\n  drawLayer(buffer, width, height, color1, color2, depth) {\n    let gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0);\n    gl.texImage2D(gl.TEXTURE_2D, 0, this.textureType, width, height, 0, this.textureType, gl.UNSIGNED_BYTE, buffer);\n    // gl.uniform1f(gl.getUniformLocation(this.program, \"u_layerDepth\"), -depth/6);\n    this.setColor(\"u_color1\", color1);\n    this.setColor(\"u_color2\", color2);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n  }\n\n  /**\n  * Resize canvas\n  * @param {number} width - width of the canvas in pixels\n  * @param {number} height - height of the canvas in pixels\n  */\n  resize(width=640, height=480) {\n    this.el.width = width;\n    this.el.height = height; \n    this.width = width;\n    this.height = height;\n    this.gl.viewport(0, 0, width, height);\n  }\n\n  /**\n  * Clear canvas\n  */\n  clear() {\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n  }\n\n  /** \n  * Destroy this canvas instance\n  */\n  destroy() {\n    // free resources\n    var refs = this.refs;\n    var gl = this.gl;\n    refs.shaders.forEach((shader) => {\n      gl.deleteShader(shader);\n    });\n    refs.shaders = [];\n    refs.textures.forEach((texture) => {\n      gl.deleteTexture(texture);\n    });\n    refs.textures = [];\n    refs.buffers.forEach((buffer) => {\n      gl.deleteBuffer(buffer);\n    });\n    refs.buffers = [];\n    gl.deleteProgram(this.program);\n    // shrink the canvas to reduce memory usage until it is garbage collected\n    gl.canvas.width = 1;\n    gl.canvas.height = 1;\n  }\n}","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\nvarying vec2 v_texcoord;\\nuniform vec4 u_color1;\\nuniform vec4 u_color2;\\nuniform sampler2D u_bitmap;\\nuniform bool u_isSmooth;\\nvoid main() {\\n  float weightColor1 = texture2D(u_bitmap, v_texcoord).a;\\n  float weightColor2 = texture2D(u_bitmap, v_texcoord).r;\\n  float alpha = 1.0;\\n  if (u_isSmooth) {\\n    weightColor1 = smoothstep(0.0, .9, weightColor1);\\n    weightColor2 = smoothstep(0.0, .9, weightColor2);\\n    float alpha = weightColor1 + weightColor2;\\n  }\\n  gl_FragColor = vec4(u_color1.rgb, alpha) * weightColor1 + vec4(u_color2.rgb, alpha) * weightColor2;\\n}\\n\"","module.exports = \"#define GLSLIFY 1\\nattribute vec4 a_position;\\nvarying vec2 v_texcoord;\\nvoid main() {\\n  gl_Position = a_position;\\n  v_texcoord = a_position.xy * vec2(0.5, -0.5) + 0.5;\\n}\""],"sourceRoot":""}